13 - Hello World
type HelloWorld = string // expected to be a string

4 - 实现 Pick
type MyPick<T, K extends keyof T> = { [P in K]: T[P] }

7 - 实现 Readonly
type MyReadonly<T> = { readonly [P in keyof T]: T[P] }

11 - 元组转换为对象
type TupleToObject<T extends readonly PropertyKey[]> = { [P in T[number]] : P }

14 - 第一个元素
type First<T extends any[]> = T['length'] extends 0 ? never : T[0]

18 - 获取元组长度
type Length<T extends readonly any[]> = T['length'] 

43 - Exclude
type MyExclude<T, U> = T extends U ? never : T

189 - Awaited
type Awaited<T extends Promise<any>> = T extends Promise<infer R> ? R :never

268 - If
type If<C extends Boolean, T, F> = C extends true ? T : F

533 - Concat
type Concat<T extends any[], U extends any[]> = [...T, ...U]

898 - Includes
type Includes<T extends readonly any[], U> = U extends T[keyof T] ? true : false

3057 - Push
type Push<T extends any[], U> = [...T, U]

3060 - Unshift
type Unshift<T extends any[], U> = [U, ...T]

3312 - Parameters
type MyParameters<T extends (...args: any[]) => any> = T extends (...args: infer R) => any ? R : never

2 - 获取函数返回类型
type MyReturnType<T extends (...args: any[]) => any> = T extends (...args: any[]) => infer R ? R : never

3 - 实现 Omit
type MyOmit<T, K extends keyof T> = { [P in keyof T as P extends K ? never: P]: T[P] }

8 - Readonly 2
type MyReadonly2<T, K extends keyof T = keyof T> = { [P in Exclude<keyof T, K>]: T[P] } & { readonly [P in K]: T[P] }

9 - 深度 Readonly
type DeepReadonly<T> = { readonly [P in keyof T]: keyof T[P] extends never ? T[P] : DeepReadonly<T[P]> }

10 - 元组转合集
type TupleToUnion<T extends any[]> = T[number]

12 - 可串联构造器
type Chainable<R extends {} = {}> = {
  option<K extends PropertyKey, V>(key: K, value: V): Chainable<R & Record<K, V>>
  get(): R
}

15 - 最后一个元素
type Last<T extends any[]> = T extends [...infer R, infer L] ? L : never

16 - 出堆
type Pop<T extends any[]> = T extends [...infer R, infer L] ? R : never

20 - Promise.all
declare function PromiseAll<T extends any[]>(values: readonly [...T]): Promise<{ [P in keyof T]: T[P] extends Promise<infer R> ? R : T[P] }>

62 - Type Lookup
type LookUp<U extends { type: any }, T extends U['type']> = U extends { type: T } ? U : never

106 - Trim Left
type TrimLeft<S extends string> = S extends `${' ' | '\n' | '\r' | '\t'}${infer R}` ? TrimLeft<R> : S

108 - Trim
type Trim<S extends string> = S extends `${' ' | '\r' | '\n' | '\t'}${infer R}` | `${infer R}${' ' | '\r' | '\n' | '\t'}` ? Trim<R> : S

110 - Capitalize
type Capitalize<S extends string> = S extends `${infer L}${infer R}` ? `${Uppercase<L>}${R}` : S

116 - Replace
type Replace<S extends string, From extends string, To extends string> = S extends `${infer L}${From}${infer R}` ? `${L}${From extends '' ? '' : To}${R}` : S

119 - ReplaceAll
type ReplaceAll<S extends string, From extends string, To extends string> = S extends `${infer L}${From}${infer R}` ? `${L}${From extends '' ? '' : To}${ReplaceAll<R, From, To>}` : S

191 - 追加参数
type AppendArgument<Fn extends (...args: any[]) => any, A> = Fn extends (...args: infer R) => infer T ? (...args: [...R, A]) => T : never

296 - Permutation ????
type Permutation<T, K = T> = [T] extends [never] ? [] : K extends K ? [K, ...Permutation<Exclude<T, K>>] : never

298・Length of String
ype LengthOfString<S extends string, T extends any[] = []> = S extends `${infer L}${infer R}` ? LengthOfString<R, [...T, L]> : T['length']
